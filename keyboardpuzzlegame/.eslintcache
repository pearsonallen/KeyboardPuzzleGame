[{"/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/reportWebVitals.js":"1","/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/PlayerScreen.jsx":"2","/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/DirectorScreen.jsx":"3","/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/App.js":"4","/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/index.js":"5","/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/CreateJoinScreen.jsx":"6"},{"size":362,"mtime":1606878237295,"results":"7","hashOfConfig":"8"},{"size":2676,"mtime":1607569617911,"results":"9","hashOfConfig":"8"},{"size":1423,"mtime":1607566698997,"results":"10","hashOfConfig":"8"},{"size":867,"mtime":1607712047255,"results":"11","hashOfConfig":"8"},{"size":500,"mtime":1606878237295,"results":"12","hashOfConfig":"8"},{"size":988,"mtime":1607712165412,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8td9hk",{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/reportWebVitals.js",[],"/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/PlayerScreen.jsx",["27","28","29","30"],"import React, { useState } from \"react\";\nimport axios from 'axios';\n\nfunction PlayerKey(props) {\n  return (\n    <span className={`key ${props.selected === true ? \"selected\" : \"\"}`}>{props.letter}</span>\n  )\n}\n\nfunction PlayerScreen(props) {\n  const [roundID, setRoundID] = useState(0);\n  const [keySelection, setKeySelection] = useState();\n  const [expectedLetters, setExpectedLetters] = useState(\"\");\n  const [status, setStatus] = useState(0);\n\n  const getRoundDetails = async () => {\n    var roundDetails = await axios.post(process.env.REACT_APP_API + \"/GetRoundDetails\",\n    {\n      gameID: props.GameID,\n      round: {roundID}\n    });\n    return roundDetails.data;\n  } \n\n  const keyboardRow1 = \"QWERTYUIOP\".split(\"\");\n  const keyboardRow2 = \"ASDFGHJKL\".split(\"\");\n  const keyboardRow3 = \"ZXCVBNM\".split(\"\");\n  const delay = ms => new Promise(res => setTimeout(res, ms));\n\n  const handleNext = async () => {\n    var roundDetails;\n    if (status === 0) {\n      roundDetails = await getRoundDetails();\n    } else if (status === 2) {\n      roundDetails = await getRoundDetails({roundID} + 1);\n    } else {\n      return;\n    }\n    \n    setRoundID(roundDetails.roundId);\n    var letters = roundDetails.letters;\n    setExpectedLetters(letters);\n    for (var i = 0; i<letters.length; i++) {\n      setKeySelection(letters[i]);\n      await delay(600);\n    }\n  }\n\n  const handleSubmit = () => {\n    if (keySelection !== expectedLetters) {\n      setStatus(1);\n    } else {\n      setStatus(2);\n    }\n  }\n\n  const statusValue = () => {\n    switch (status) {\n      case 0:\n        return \"\";\n        break;\n      case 1:\n        return \"Wrong\";\n        break;\n      case 2:\n        return \"Correct!\";\n        break;\n      default:\n        return \"\";\n        break;\n    }\n  }\n\n  return (\n<div>\n\n<h1>Round {roundID}</h1>\n\n<div className=\"keyboard\">\n  <div className=\"keyboardRow\">\n    {keyboardRow1.map((letter, i) => {\n      return <PlayerKey key={i} letter={letter} selected={keySelection === letter} />\n    })}\n  </div>\n  <div className=\"keyboardRow\">   \n  {keyboardRow2.map((letter, i) => {\n      return <PlayerKey key={i} letter={letter} selected={keySelection === letter} />\n    })}\n  </div>\n  <div className=\"keyboardRow\">\n  {keyboardRow3.map((letter, i) => {\n      return <PlayerKey key={i} letter={letter} selected={keySelection === letter} />\n    })}\n  </div>\n</div>\n\n<div className=\"input\">\n<input type=\"text\" onChange={e => setKeySelection(e.target.value)} />\n<button className=\"submit-guess\" onClick={handleSubmit}>Submit</button>\n<span>{statusValue()}</span>\n<button className=\"next-round\" onClick={handleNext}>Next</button>\n</div>\n</div>\n  );\n}\n\nexport default PlayerScreen;","/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/DirectorScreen.jsx",[],"/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/App.js",["31","32"],"/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/index.js",[],"/Users/chrispearson/Projects/KeyboardPuzzleGame/keyboardpuzzlegame/src/CreateJoinScreen.jsx",["33"],{"ruleId":"34","severity":1,"message":"35","line":61,"column":9,"nodeType":"36","messageId":"37","endLine":61,"endColumn":15},{"ruleId":"34","severity":1,"message":"35","line":64,"column":9,"nodeType":"36","messageId":"37","endLine":64,"endColumn":15},{"ruleId":"34","severity":1,"message":"35","line":67,"column":9,"nodeType":"36","messageId":"37","endLine":67,"endColumn":15},{"ruleId":"34","severity":1,"message":"35","line":70,"column":9,"nodeType":"36","messageId":"37","endLine":70,"endColumn":15},{"ruleId":"38","severity":1,"message":"39","line":1,"column":8,"nodeType":"40","messageId":"41","endLine":1,"endColumn":12},{"ruleId":"38","severity":1,"message":"42","line":3,"column":17,"nodeType":"40","messageId":"41","endLine":3,"endColumn":26},{"ruleId":"38","severity":1,"message":"42","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":26},"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used."]